// controllers/processController.js
const { Process } = require('../models');
const { Op } = require('sequelize');

// 获取所有工序
exports.getAllProcesses = async (req, res) => {
  try {
    const { page = 1, limit = 10, status, keyword } = req.query;
    
    const whereClause = {};
    if (status) whereClause.status = status;
    if (keyword) {
      whereClause[Op.or] = [
        { name: { [Op.like]: `%${keyword}%` } },
        { code: { [Op.like]: `%${keyword}%` } }
      ];
    }

    const processes = await Process.findAndCountAll({
      where: whereClause,
      limit: parseInt(limit),
      offset: (parseInt(page) - 1) * parseInt(limit),
      order: [['createdAt', 'DESC']]
    });

    res.json({
      success: true,
      data: {
        processes: processes.rows,
        pagination: {
          total: processes.count,
          page: parseInt(page),
          limit: parseInt(limit),
          pages: Math.ceil(processes.count / parseInt(limit))
        }
      }
    });
  } catch (error) {
    console.error('Get processes error:', error);
    res.status(500).json({
      success: false,
      message: '获取工序列表失败'
    });
  }
};

// 根据ID获取单个工序
exports.getProcessById = async (req, res) => {
  try {
    const { id } = req.params;
    
    const process = await Process.findByPk(id);

    if (!process) {
      return res.status(404).json({
        success: false,
        message: '工序不存在'
      });
    }

    res.json({
      success: true,
      data: { process }
    });
  } catch (error) {
    console.error('Get process error:', error);
    res.status(500).json({
      success: false,
      message: '获取工序失败'
    });
  }
};

// 创建工序
exports.createProcess = async (req, res) => {
  try {
    const { name, status = 'active' } = req.body;
    
    if (!name) {
      return res.status(400).json({
        success: false,
        message: '名称不能为空'
      });
    }

    const process = await Process.create({
      name,
      status
    });

    res.status(201).json({
      success: true,
      data: { process }
    });
  } catch (error) {
    console.error('Create process error:', error);
    res.status(500).json({
      success: false,
      message: '创建工序失败'
    });
  }
};

// 更新工序
exports.updateProcess = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, status } = req.body;
    
    const process = await Process.findByPk(id);
    if (!process) {
      return res.status(404).json({
        success: false,
        message: '工序不存在'
      });
    }

    await process.update({
      name: name || process.name,
      status: status || process.status
    });

    res.json({
      success: true,
      data: { process }
    });
  } catch (error) {
    console.error('Update process error:', error);
    res.status(500).json({
      success: false,
      message: '更新工序失败'
    });
  }
};

// 删除工序
exports.deleteProcess = async (req, res) => {
  try {
    const { id } = req.params;
    
    const process = await Process.findByPk(id);
    if (!process) {
      return res.status(404).json({
        success: false,
        message: '工序不存在'
      });
    }

    await process.destroy();

    res.json({
      success: true,
      message: '工序删除成功'
    });
  } catch (error) {
    console.error('Delete process error:', error);
    res.status(500).json({
      success: false,
      message: '删除工序失败'
    });
  }
};
